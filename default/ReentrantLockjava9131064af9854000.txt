{"version":"9131064af9854000","fileName":"ReentrantLock.java","fileSimpleName":"ReentrantLock","fileType":"java","notes":{"131":"获取当前线程","132":"获取状态","133":"如果当前状态为 0","134":"CAS 替换","135":"设置当前线程为正在执行的线程","200":"非公平锁","139":"查看当前的线程是否为正在执行的线程，如果是的话，进行重入操作（锁的可重入性）","140":"当前状态加上 acquires，代表重入一次","141":"state 变量为 int 类型，如果超过了最大值会变为负数，这里的判断是防止重入次数太多，state 变为负数","142":"小于 0 代表达到了 int 最大值，抛出异常","239":"判断当前队列里是否已经有线程在排队","209":"CAS 把 state 0 更新为 1","116":"静态内部类","212":"如果更新失败，则执行 acquire 方法","151":"releases 一次 state 就要减掉一次","152":"如果当前线程不是正在执行的线程，直接抛出异常","154":"是否释放完毕标志位","155":"当 state 为 0 时","156":"把 free 置为 true，代表释放成功","157":"把当前正在执行的线程置为空","223":"公平锁","159":"如果线程进行了重入，直接把状态减一后设置，此时返回的 free 为 false"}}